package main

import (
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

const (
	header = `
// Code generated by protoc-gen-enumlower. DO NOT EDIT.

package $$package
import (
	"fmt"
	"strings"
)
`

	functions = `
func Parse$$typeLower(s string) ($$type, error) {
	key := "$$prefix_" + strings.ToUpper(s)
	if v, ok := $$type_value[key]; ok {
		return $$type(v), nil
	}
	return 0, fmt.Errorf("invalid $$type lower name %q", s)
}

func (x $$type) LowerString() string {
	s := x.String()
	if strings.HasPrefix(s, "$$prefix") {
		return strings.ToLower(s[len("$$prefix_"):])
	}
	return strings.ToLower(s)
}
`
)

func main() {
	protogen.Options{}.Run(func(plugin *protogen.Plugin) error {
		for _, file := range plugin.Files {
			if !file.Generate {
				continue
			}

			generate(plugin, file)
		}

		return nil
	})
}

func template(t string, m map[string]string) string {
	res := t
	for k, v := range m {
		res = strings.ReplaceAll(res, "$$"+k, v)
	}
	return res
}

func generate(plugin *protogen.Plugin, file *protogen.File) {
	result := ""
	result += template(header, map[string]string{
		"package": string(file.GoPackageName),
	})

	for _, enum := range file.Enums {
		typeName := enum.GoIdent.GoName
		prefix := strings.ToUpper(typeName)

		result += template(functions, map[string]string{
			"type":   typeName,
			"prefix": prefix,
		})
	}

	g := plugin.NewGeneratedFile(
		file.GeneratedFilenamePrefix+"_enumlower.go",
		file.GoImportPath,
	)
	g.P(result)
}
