// Package enumlower provides code generation utilities for creating lower-case
// string parsing and formatting functions for enum types in Go code generated
// from Protocol Buffers. It is intended for use as a plugin with protoc-gen-go,
// and generates helper functions to parse and format enums using lower-case
// strings.
package enumlower

import (
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

// generatedFile abstracts the generated file writer, allowing for easier
// testing and flexibility. It must implement the P method, which writes content
// to the generated file.
type generatedFile interface {
	P(...any)
}

// newGeneratedFile creates a new generated file using the protogen plugin. This
// is defined as a variable for easier testing and dependency injection.
var newGeneratedFile = func(
	plugin *protogen.Plugin,
	filename string,
	importPath protogen.GoImportPath,
) generatedFile {
	return plugin.NewGeneratedFile(filename, importPath)
}

const (
	// header is a template for the generated file header, including package and
	// imports.
	header = `
// Code generated by protoc-gen-enumlower. DO NOT EDIT.

package $$package
import (
	"fmt"
	"strings"
)
`

	// functions is a template for the Parse and LowerString functions for each
	// enum type.
	functions = `
func Parse$$typeLower(s string) ($$type, error) {
	key := "$$prefix_" + strings.ToUpper(s)
	if v, ok := $$type_value[key]; ok {
		return $$type(v), nil
	}
	return 0, fmt.Errorf("invalid $$type lower name %q", s)
}

func (x $$type) LowerString() string {
	s := x.String()
	if strings.HasPrefix(s, "$$prefix") {
		return strings.ToLower(s[len("$$prefix_"):])
	}
	return strings.ToLower(s)
}
`
)

// applyTemplate replaces placeholders in the template string t with values from
// map m. Placeholders are in the form $$key and are replaced with the
// corresponding value.
func applyTemplate(t string, m map[string]string) string {
	res := t
	for k, v := range m {
		res = strings.ReplaceAll(res, "$$"+k, v)
	}
	return res
}

// Generate creates a Go file with lower-case parsing and formatting helpers for
// all enums in the given proto file. It applies the header and function
// templates, then writes the result to a new generated file.
func Generate(plugin *protogen.Plugin, file *protogen.File) {
	result := ""
	result += applyTemplate(header, map[string]string{
		"package": string(file.GoPackageName),
	})

	for _, enum := range file.Enums {
		typeName := enum.GoIdent.GoName
		prefix := strings.ToUpper(typeName)

		result += applyTemplate(functions, map[string]string{
			"type":   typeName,
			"prefix": prefix,
		})
	}

	g := newGeneratedFile(
		plugin,
		file.GeneratedFilenamePrefix+"_enumlower.go",
		file.GoImportPath,
	)
	g.P(result)
}
